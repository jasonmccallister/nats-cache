// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cache/v1/cache.proto

package cachev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jasonmccallister/nats-cache/internal/gen/cache/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CacheServiceName is the fully-qualified name of the CacheService service.
	CacheServiceName = "cache.v1.CacheService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CacheServiceDeleteProcedure is the fully-qualified name of the CacheService's Delete RPC.
	CacheServiceDeleteProcedure = "/cache.v1.CacheService/Delete"
	// CacheServiceExistsProcedure is the fully-qualified name of the CacheService's Exists RPC.
	CacheServiceExistsProcedure = "/cache.v1.CacheService/Exists"
	// CacheServiceGetProcedure is the fully-qualified name of the CacheService's Get RPC.
	CacheServiceGetProcedure = "/cache.v1.CacheService/Get"
	// CacheServiceGetMultiProcedure is the fully-qualified name of the CacheService's GetMulti RPC.
	CacheServiceGetMultiProcedure = "/cache.v1.CacheService/GetMulti"
	// CacheServiceGetStreamProcedure is the fully-qualified name of the CacheService's GetStream RPC.
	CacheServiceGetStreamProcedure = "/cache.v1.CacheService/GetStream"
	// CacheServicePurgeProcedure is the fully-qualified name of the CacheService's Purge RPC.
	CacheServicePurgeProcedure = "/cache.v1.CacheService/Purge"
	// CacheServiceSetStreamProcedure is the fully-qualified name of the CacheService's SetStream RPC.
	CacheServiceSetStreamProcedure = "/cache.v1.CacheService/SetStream"
	// CacheServiceSetProcedure is the fully-qualified name of the CacheService's Set RPC.
	CacheServiceSetProcedure = "/cache.v1.CacheService/Set"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cacheServiceServiceDescriptor         = v1.File_cache_v1_cache_proto.Services().ByName("CacheService")
	cacheServiceDeleteMethodDescriptor    = cacheServiceServiceDescriptor.Methods().ByName("Delete")
	cacheServiceExistsMethodDescriptor    = cacheServiceServiceDescriptor.Methods().ByName("Exists")
	cacheServiceGetMethodDescriptor       = cacheServiceServiceDescriptor.Methods().ByName("Get")
	cacheServiceGetMultiMethodDescriptor  = cacheServiceServiceDescriptor.Methods().ByName("GetMulti")
	cacheServiceGetStreamMethodDescriptor = cacheServiceServiceDescriptor.Methods().ByName("GetStream")
	cacheServicePurgeMethodDescriptor     = cacheServiceServiceDescriptor.Methods().ByName("Purge")
	cacheServiceSetStreamMethodDescriptor = cacheServiceServiceDescriptor.Methods().ByName("SetStream")
	cacheServiceSetMethodDescriptor       = cacheServiceServiceDescriptor.Methods().ByName("Set")
)

// CacheServiceClient is a client for the cache.v1.CacheService service.
type CacheServiceClient interface {
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Exists(context.Context, *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetMulti(context.Context, *connect.Request[v1.GetMultiRequest]) (*connect.Response[v1.GetMultiResponse], error)
	GetStream(context.Context) *connect.BidiStreamForClient[v1.GetRequest, v1.GetResponse]
	Purge(context.Context, *connect.Request[v1.PurgeRequest]) (*connect.Response[v1.PurgeResponse], error)
	SetStream(context.Context) *connect.BidiStreamForClient[v1.SetRequest, v1.SetResponse]
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
}

// NewCacheServiceClient constructs a client for the cache.v1.CacheService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCacheServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CacheServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cacheServiceClient{
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CacheServiceDeleteProcedure,
			connect.WithSchema(cacheServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exists: connect.NewClient[v1.ExistsRequest, v1.ExistsResponse](
			httpClient,
			baseURL+CacheServiceExistsProcedure,
			connect.WithSchema(cacheServiceExistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+CacheServiceGetProcedure,
			connect.WithSchema(cacheServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMulti: connect.NewClient[v1.GetMultiRequest, v1.GetMultiResponse](
			httpClient,
			baseURL+CacheServiceGetMultiProcedure,
			connect.WithSchema(cacheServiceGetMultiMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStream: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+CacheServiceGetStreamProcedure,
			connect.WithSchema(cacheServiceGetStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		purge: connect.NewClient[v1.PurgeRequest, v1.PurgeResponse](
			httpClient,
			baseURL+CacheServicePurgeProcedure,
			connect.WithSchema(cacheServicePurgeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setStream: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+CacheServiceSetStreamProcedure,
			connect.WithSchema(cacheServiceSetStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+CacheServiceSetProcedure,
			connect.WithSchema(cacheServiceSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cacheServiceClient implements CacheServiceClient.
type cacheServiceClient struct {
	delete    *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	exists    *connect.Client[v1.ExistsRequest, v1.ExistsResponse]
	get       *connect.Client[v1.GetRequest, v1.GetResponse]
	getMulti  *connect.Client[v1.GetMultiRequest, v1.GetMultiResponse]
	getStream *connect.Client[v1.GetRequest, v1.GetResponse]
	purge     *connect.Client[v1.PurgeRequest, v1.PurgeResponse]
	setStream *connect.Client[v1.SetRequest, v1.SetResponse]
	set       *connect.Client[v1.SetRequest, v1.SetResponse]
}

// Delete calls cache.v1.CacheService.Delete.
func (c *cacheServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Exists calls cache.v1.CacheService.Exists.
func (c *cacheServiceClient) Exists(ctx context.Context, req *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error) {
	return c.exists.CallUnary(ctx, req)
}

// Get calls cache.v1.CacheService.Get.
func (c *cacheServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetMulti calls cache.v1.CacheService.GetMulti.
func (c *cacheServiceClient) GetMulti(ctx context.Context, req *connect.Request[v1.GetMultiRequest]) (*connect.Response[v1.GetMultiResponse], error) {
	return c.getMulti.CallUnary(ctx, req)
}

// GetStream calls cache.v1.CacheService.GetStream.
func (c *cacheServiceClient) GetStream(ctx context.Context) *connect.BidiStreamForClient[v1.GetRequest, v1.GetResponse] {
	return c.getStream.CallBidiStream(ctx)
}

// Purge calls cache.v1.CacheService.Purge.
func (c *cacheServiceClient) Purge(ctx context.Context, req *connect.Request[v1.PurgeRequest]) (*connect.Response[v1.PurgeResponse], error) {
	return c.purge.CallUnary(ctx, req)
}

// SetStream calls cache.v1.CacheService.SetStream.
func (c *cacheServiceClient) SetStream(ctx context.Context) *connect.BidiStreamForClient[v1.SetRequest, v1.SetResponse] {
	return c.setStream.CallBidiStream(ctx)
}

// Set calls cache.v1.CacheService.Set.
func (c *cacheServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// CacheServiceHandler is an implementation of the cache.v1.CacheService service.
type CacheServiceHandler interface {
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Exists(context.Context, *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetMulti(context.Context, *connect.Request[v1.GetMultiRequest]) (*connect.Response[v1.GetMultiResponse], error)
	GetStream(context.Context, *connect.BidiStream[v1.GetRequest, v1.GetResponse]) error
	Purge(context.Context, *connect.Request[v1.PurgeRequest]) (*connect.Response[v1.PurgeResponse], error)
	SetStream(context.Context, *connect.BidiStream[v1.SetRequest, v1.SetResponse]) error
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
}

// NewCacheServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCacheServiceHandler(svc CacheServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cacheServiceDeleteHandler := connect.NewUnaryHandler(
		CacheServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(cacheServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceExistsHandler := connect.NewUnaryHandler(
		CacheServiceExistsProcedure,
		svc.Exists,
		connect.WithSchema(cacheServiceExistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceGetHandler := connect.NewUnaryHandler(
		CacheServiceGetProcedure,
		svc.Get,
		connect.WithSchema(cacheServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceGetMultiHandler := connect.NewUnaryHandler(
		CacheServiceGetMultiProcedure,
		svc.GetMulti,
		connect.WithSchema(cacheServiceGetMultiMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceGetStreamHandler := connect.NewBidiStreamHandler(
		CacheServiceGetStreamProcedure,
		svc.GetStream,
		connect.WithSchema(cacheServiceGetStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cacheServicePurgeHandler := connect.NewUnaryHandler(
		CacheServicePurgeProcedure,
		svc.Purge,
		connect.WithSchema(cacheServicePurgeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceSetStreamHandler := connect.NewBidiStreamHandler(
		CacheServiceSetStreamProcedure,
		svc.SetStream,
		connect.WithSchema(cacheServiceSetStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cacheServiceSetHandler := connect.NewUnaryHandler(
		CacheServiceSetProcedure,
		svc.Set,
		connect.WithSchema(cacheServiceSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cache.v1.CacheService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CacheServiceDeleteProcedure:
			cacheServiceDeleteHandler.ServeHTTP(w, r)
		case CacheServiceExistsProcedure:
			cacheServiceExistsHandler.ServeHTTP(w, r)
		case CacheServiceGetProcedure:
			cacheServiceGetHandler.ServeHTTP(w, r)
		case CacheServiceGetMultiProcedure:
			cacheServiceGetMultiHandler.ServeHTTP(w, r)
		case CacheServiceGetStreamProcedure:
			cacheServiceGetStreamHandler.ServeHTTP(w, r)
		case CacheServicePurgeProcedure:
			cacheServicePurgeHandler.ServeHTTP(w, r)
		case CacheServiceSetStreamProcedure:
			cacheServiceSetStreamHandler.ServeHTTP(w, r)
		case CacheServiceSetProcedure:
			cacheServiceSetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCacheServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCacheServiceHandler struct{}

func (UnimplementedCacheServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.Delete is not implemented"))
}

func (UnimplementedCacheServiceHandler) Exists(context.Context, *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.Exists is not implemented"))
}

func (UnimplementedCacheServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.Get is not implemented"))
}

func (UnimplementedCacheServiceHandler) GetMulti(context.Context, *connect.Request[v1.GetMultiRequest]) (*connect.Response[v1.GetMultiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.GetMulti is not implemented"))
}

func (UnimplementedCacheServiceHandler) GetStream(context.Context, *connect.BidiStream[v1.GetRequest, v1.GetResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.GetStream is not implemented"))
}

func (UnimplementedCacheServiceHandler) Purge(context.Context, *connect.Request[v1.PurgeRequest]) (*connect.Response[v1.PurgeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.Purge is not implemented"))
}

func (UnimplementedCacheServiceHandler) SetStream(context.Context, *connect.BidiStream[v1.SetRequest, v1.SetResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.SetStream is not implemented"))
}

func (UnimplementedCacheServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cache.v1.CacheService.Set is not implemented"))
}
