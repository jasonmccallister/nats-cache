syntax = "proto3";

package cache.v1;

message ExistsRequest {
    optional uint32 database = 1;
    repeated string keys = 2;
}

message ExistsResponse {
    repeated string keys = 1;
    uint32 count = 2;
}

// GetRequest is the request message for the Get method. The database is optional and 
// used primarily as a prefix for the key. This supports applications that use the 
// service as a mutex, sessions, or cache without making additional accounts.
// If the database is not specified, the default database of 0 is assumed. 
message GetRequest {
    optional uint32 database = 1;
    string key = 2;
}

// GetResponse is the response message for the Get method. 
message GetResponse {
    string key = 1;
    bytes value = 2;
    // ttl is the time to live for the key. If the key is not found, the ttl will be 0. Otherwise,
    // it will be expiration in unix time.
    int64 ttl = 3;
}

// SetGetRequest is the request message for the Set method. The database is optional and 
// used primarily as a prefix for the key. This supports applications that use the 
// service as a mutex, sessions, or cache without making additional accounts.
// If the database is not specified, the default database of 0 is used. 
message SetRequest {
    optional uint32 database = 1;
    string key = 2;
    bytes value = 3;
    optional uint32 ttl = 4;
}

message SetResponse {
    string key = 1;
    bytes value = 2;
    int64 ttl = 3;
}

// DeleteRequest is the request message for the Delete method. The database is optional and
// used primarily as a prefix for the key. If the database is not specified, the default
// database of 0 is used.
message DeleteRequest {
    optional uint32 database = 1;
    string key = 2;
}

message DeleteResponse {
    bool deleted = 1;
}

// PurgeRequest is the request message for the Purge method.
message PurgeRequest {
    optional uint32 database = 1;
    optional string prefix = 2;
}

message PurgeResponse {
    bool purged = 1;
}

service CacheService {
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
    rpc Exists(ExistsRequest) returns (ExistsResponse) {}
    rpc Get(GetRequest) returns (GetResponse) {}
    rpc GetStream(stream GetRequest) returns (stream GetResponse) {}
    rpc Purge(PurgeRequest) returns (PurgeResponse) {}
    rpc SetStream(stream SetRequest) returns (stream SetResponse) {}
    rpc Set(SetRequest) returns (SetResponse) {}
}
